"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeepCopy = void 0;
var DeepCopy;
(function (DeepCopy) {
    function deepCopy(source) {
        const sourceType = typeof source;
        const isArray = Array.isArray(source);
        const newArr = [];
        const newObj = {};
        if (sourceType !== 'object')
            return source;
        const copy = source;
        if (isArray) {
            for (let i = 0; i < copy.length; i++) {
                const current = copy[i];
                newArr[i] = deepCopy(current);
            }
        }
        else if (sourceType === 'object' && !isArray) {
            for (let key in source) {
                const current = source[key];
                newObj[key] = deepCopy(current);
            }
        }
        return isArray ? newArr : newObj;
    }
    DeepCopy.deepCopy = deepCopy;
})(DeepCopy = exports.DeepCopy || (exports.DeepCopy = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVlcENvcHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEZWVwQ29weS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFpQixRQUFRLENBd0R4QjtBQXhERCxXQUFpQixRQUFRO0lBZ0N2QixTQUFnQixRQUFRLENBQWdCLE1BQVM7UUFFL0MsTUFBTSxVQUFVLEdBQUcsT0FBTyxNQUFNLENBQUM7UUFDakMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QyxNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsTUFBTSxNQUFNLEdBQXlCLEVBQUUsQ0FBQztRQUV0QyxJQUFJLFVBQVUsS0FBSyxRQUFRO1lBQUUsT0FBTyxNQUFNLENBQUM7UUFFM0MsTUFBTSxJQUFJLEdBQUcsTUFBYSxDQUFBO1FBRTVCLElBQUksT0FBTyxFQUFFO1lBQ1gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMvQjtTQUNGO2FBQU0sSUFBSSxVQUFVLEtBQUssUUFBUSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQzlDLEtBQUssSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO2dCQUN0QixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDakM7U0FDRjtRQUNELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBRSxNQUFZLENBQUMsQ0FBQyxDQUFFLE1BQVksQ0FBQztJQUNqRCxDQUFDO0lBdkJlLGlCQUFRLFdBdUJ2QixDQUFBO0FBQ0gsQ0FBQyxFQXhEZ0IsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUF3RHhCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IG5hbWVzcGFjZSBEZWVwQ29weSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBkZWVwIGNvcHkgb2YgYSBkaWN0aW9uYXJ5IHN1Y2ggdGhhdCBhbGwgb2YgdGhlIG9yaWdpbmEga2V5cyBhcmUgbWFpbnRhaW5lZFxuICAgKiBhbmQgY29waWVkIGludG8gYSBuZXcgZGljdGlvbmFyeS5cbiAgICpcbiAgICogVGhpcyBpcyB1c2VkIHdoZW4gd2UgaGF2ZSB0byBjcmVhdGUgYSBjb3B5IG9mIGEgZGljdGlvbmFyeSB0byBwcmV2ZW50IGNvbmN1cnJlbnQgbXV0YXRpb25cbiAgICogb3Igd2hlbiB3ZSBuZWVkIHRvIGNvcHkgaXQgYW5kIHRoZW4gbWFrZSBjaGFuZ2VzIHRvIHRoZSBuZXcgZGljdGlvbmFyeS5cbiAgICpcbiAgICogVGhlIHZhbHVlcyBpbiB0aGUgbWFwIGNvdWxkIGJlIGFycmF5cywgb3RoZXIgZGljdGlvbmFyaWVzLCBzZXRzLCBtYXBzLCBzdHJpbmdzLCBhcnJheXMsIGV0Yy5cbiAgICpcbiAgICogTWFrZSBzdXJlIHRvIGhhbmRsZSBhbGwgY2FzZXMuXG4gICAqXG4gICAqIFRoaXMgbmVlZHMgdG8gYmUgZnVsbHkgcmVjdXJzaXZlIGluY2x1ZGluZyBkaWN0aW9uYXJpZXMgY29udGFpbiBvdGhlciBkaWN0aW9uYXJpZXNcbiAgICogYW5kIGFycmF5cy5cbiAgICpcbiAgICogSElOVFNcbiAgICpcbiAgICogLSBUbyB0ZXN0IGlmIGEgdmFyaWFibGUgaXMgYW4gb2JqZWN0OlxuICAgKlxuICAgKiB0eXBlb2YgdmFsID09PSAnb2JqZWN0J1xuICAgKlxuICAgKiAtIFRvIHRlc3QgaWYgYSB2YXJpYWJsZSBpcyBhbiBhcnJheTpcbiAgICpcbiAgICogQXJyYXkuaXNBcnJheShvYmplY3QpXG4gICAqXG4gICAqIC0gVG8gZ2V0IGFsbCB0aGUga2V5cyBvZiBhbiBvYmplY3QgeW91IGNhbiBjYWxsIE9iamVjdC5rZXlzKGRpY3QpXG4gICAqXG4gICAqIC0gSWYgeW91IGFyZSBnaXZlbiBhbiBhcnJheSBhcyBpbnB1dCBpdCBzaG91bGQgcmV0dXJuIGFuIGFycmF5IGFzIG91dHB1dC5cbiAgICpcbiAgICogLSBJZiB5b3UgYXJlIGdpdmVuIGFuIG9iamVjdCBhcyBpbnB1dCBpdCBzaG91bGQgcmV0dXJuIGFuIG9iamVjdCBhcyBvdXRwdXQuXG4gICAqXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gZGVlcENvcHk8VCBleHRlbmRzIGFueT4oc291cmNlOiBUKTogVCB7XG4gICAgLy8gVE9ETzogaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gZGVmaW5pdGlvbi5cbiAgICBjb25zdCBzb3VyY2VUeXBlID0gdHlwZW9mIHNvdXJjZTtcbiAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuICAgIGNvbnN0IG5ld0FycjogVFtdID0gW107XG4gICAgY29uc3QgbmV3T2JqOiBSZWNvcmQ8YW55LCB1bmtub3duPiA9IHt9O1xuXG4gICAgICBpZiAoc291cmNlVHlwZSAhPT0gJ29iamVjdCcpIHJldHVybiBzb3VyY2U7XG4gICAgICBcbiAgICAgIGNvbnN0IGNvcHkgPSBzb3VyY2UgYXMgVFtdXG5cbiAgICBpZiAoaXNBcnJheSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3B5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBjb3B5W2ldO1xuICAgICAgICBuZXdBcnJbaV0gPSBkZWVwQ29weShjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNvdXJjZVR5cGUgPT09ICdvYmplY3QnICYmICFpc0FycmF5KSB7XG4gICAgICBmb3IgKGxldCBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgbmV3T2JqW2tleV0gPSBkZWVwQ29weShjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkgPyAobmV3QXJyIGFzIFQpIDogKG5ld09iaiBhcyBUKTtcbiAgfVxufVxuIl19